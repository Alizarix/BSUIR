#include <iostream>
#include <cstdlib>
using namespace std;

//Ввести 10 - 15 целых чисел и построить из них с помощью указателей бинарное дерево поиска.
//Обойти его прямым, симметричным и обратным способами.
//Реализовать процедуры поиска, вставки и удаления элементов бинарного дерева поиска.

struct node {
    int key;
    struct node* left, * right;
};

// A utility function to create a new BST node
struct node* newNode(int item)
{
    struct node* temp
        = (struct node*)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}


void inorder(struct node* root) //симметричный
{
    if (root != NULL) {
        inorder(root->left);
        cout << root->key << " ";
        inorder(root->right);
    }
}

void preorder(node* root) //прямой
{
    if (root == NULL)   
    {
        return;
    }
    cout << root->key << " ";
    preorder(root->left);   
    preorder(root->right);  
}

void postorder(node* root) //обратный
{
    if (root == NULL)   
    {
        return;
    }
    preorder(root->left);   
    preorder(root->right);  
    cout << root->key << " ";
}


struct node* insert(struct node* node, int key)
{
    /* If the tree is empty, return a new node */
    if (node == NULL)
        return newNode(key);

    /* Otherwise, recur down the tree */
    if (key < node->key)
        node->left = insert(node->left, key);
    else
        node->right = insert(node->right, key);

    /* return the (unchanged) node pointer */
    return node;
}

/* Given a non-empty binary search tree, return the node
with minimum key value found in that tree. Note that the
entire tree does not need to be searched. */
struct node* minValueNode(struct node* node)
{
    struct node* current = node;

    /* loop down to find the leftmost leaf */
    while (current && current->left != NULL)
        current = current->left;

    return current;
}

struct node* deleteNode(struct node* root, int key)
{
    // base case
    if (root == NULL)
        return root;

    // If the key to be deleted is
    // smaller than the root's
    // key, then it lies in left subtree
    if (key < root->key)
        root->left = deleteNode(root->left, key);

    // If the key to be deleted is
    // greater than the root's
    // key, then it lies in right subtree
    else if (key > root->key)
        root->right = deleteNode(root->right, key);

    // if key is same as root's key, then This is the node
    // to be deleted
    else {
        // node has no child
        if (root->left == NULL and root->right == NULL)
            return NULL;

        // node with only one child or no child
        else if (root->left == NULL) {
            struct node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            struct node* temp = root->left;
            free(root);
            return temp;
        }

        // node with two children: Get the inorder successor
        // (smallest in the right subtree)
        struct node* temp = minValueNode(root->right);

        // Copy the inorder successor's content to this node
        root->key = temp->key;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}


bool search(struct node* root, int v)
{
    if (root->key == v)
        return true;
    else
        if (root->left->key == v)
            return true;
        else
            if (root->right->key == v)
                return true;
            else
                search(root->left, v);

}



// Driver Code
int main()
{
    setlocale(LC_ALL, "rus");
    
    struct node* root = NULL;
    int a, v;

    while (1) {
        cout << endl;
        cout << "1. Добавить элемент " << endl;
        cout << "2. Удалить элемент" << endl;
        cout << "3. Поиск" << endl;
        cout << "4. Печать" << endl;
        cout << "0. Выход" << endl;
        cout << "Выберите нужный пункт меню: ";
        cin >> a;

        switch (a) {
        case 1:
            cout << "Введите целочисленный элемент для вставки: ";
            cin >> v;
            root = insert(root, v);
            cout << endl;
            break;
        case 2:
            cout << "Введите целочисленный элемент для удаления: ";
            cin >> v;
            
            root = deleteNode(root, v);
            
            break;
        case 3:
            cout << "Введите целочисленный элемент для поиска: ";
            cin >> v;
            if (search(root, v))
            {
                cout << "Элемент найден" << endl;
            }
            else
            {
                cout << "Элемент не найден" << endl;
            }

            break;
       
        case 4:
            cout << endl << "Симметричный:"  << endl;
            inorder(root);
            cout << endl << "Прямой:" << endl;
            preorder(root);
            cout << endl << "Обратный: "<< endl;
            postorder(root);
            break;
        case 0:
            exit(1);
        default:
            cout << "\n Неверный ввод \n";
        }
    }

    return 0;
}
